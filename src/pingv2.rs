use nix::sys::socket::*;

pub fn create_socket(address : &str) -> i32{
	//let parsed_addr = address.parse::<Ipv4Addr>().unwrap();
	// int raw_socket = socket(AF_INET, SOCK_RAW, IPPROTO_IP);
	// int on = 1;
	// setsockopt(sock, IPPROTO_IP, IP_HDRINCL, &on, sizeof(on)) < 0
	//let soc = socket(AF_INET, SOCK_RAW, IPPROTO_IP);
	let s = socket(
        AddressFamily::Inet,
        SockType::Datagram,
        SockFlag::empty(),
        None,
    )
    .expect("Failed to get socket");s
	return s;
}

pub fn send_ping(soc : i32) -> bool {

	let msg: [u8;98] = [
	0xf4, 0x8e, 0x38, 0x23, 0xbf, 0x81, 0xf8, 0x59, 0x71, 0x48, 0x5e, 0xef, 0x08, 0x00, 0x45, 0x00,
	0x00, 0x54, 0xd3, 0xe0, 0x40, 0x00, 0x3f, 0x01, 0xa8, 0x44, 0xac, 0x11, 0x03, 0x63, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x00, 0x66, 0xc2, 0x03, 0xe8, 0x00, 0x01, 0x3b, 0x9c, 0x8b, 0x62, 0x00, 0x00,
	0x00, 0x00, 0xfb, 0x82, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
	0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25,
	0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
	0x36, 0x37
	];
	let addr = SockAddr::new_inet(InetAddr::new(IpAddr::new_v4(8, 8, 8, 8), 0));
	sendto(soc, &msg,&addr, MsgFlags::empty());
	//send(soc,&msg,MsgFlags::empty());
	return true;
}